
1. K8S 환경 구축

   kind.sigs.k8s.io

   User Guide > Quick Start > Installation >
   Installing With A Package Manager > On Windows via Chocolatey 

   1.1 kind 설치
      - chocolatey 설치
        Windows 용 커맨드 라인 패키지 매니저.
        MS 에서 공식으로 제공하는 도구는 아님.

        https://community.chocolatey.org

        power shell 의 관리자 모드로 접속 후 아래의 명령어를 실행

        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

        설치 확인

        choco -v

        chocolatey 의 버전이 출력되면 정상 설치가 된 것임.
        ( 현재의 버전은 2.3.0 임. )

      - kind 설치
        choco install kind

        kind --version

        K8S 클러서터를 local 에 설치. Docker 가 설치된 곳에서 설치를 해야함.
        kind create cluster

   1.2 kubectl 설치
       kubernetes.io

       Documentation > Task > Install Tools >
       Install and Set Up kubectl on Windows >
       Install on Windows using Chocolatey, Scoop, or winget

       설치 명령어
       choco install kubernetes-cli

       설치 완료 유무 확인
       kubectl version
          => clinet, server version 모두 확인이 되면, 정상 설치가 됨.

       kubectl 명령어 실행 확인
       kubectl run nginx --image nginx
          => k8s 에게 nginx 컨테이너를 실행하라는 명려어
             pod/nginx created  메세지 확인

       위의 명령어가 잘 수행이 되었는지 확인
       kubectl get pods nginx
          => 생성된 nginx 컨테이너가 잘 실행되고 있는지 확인.

       생성된 pod(container) 를 삭제.
       kubectl delete pods nginx
          => pod "nginx" deleted 확인

   k8s 명령어르 사용해서 컨테이너 실행, 상태확인, 삭제 동작이 잘 되는 것을
   의미함. 그래서, 실습을 위한 k8s 환경이 잘 구성되었음을 의미함.

  
2. 쿠버네티스
   컨테이너화된 애플리케이션의 자동 배포, 확장 및 관리를 해주는 오픈소스
   플랫폼임.

   구글에서 시작한 사내 프로젝트로 2014 년에 발표됨.

   컨테이너를 실행하는데 컨테이너가 100 개 라면,
   docker contaienr run 명령어를 100 번 실행을 해야함.
   실행중인 컨테이너에 문제가 발생하면 컨테이터수가 많아서 
   관리가 힘듬.

   - 쿠버네티스 클러스터
     마스터 노드와 워크 노드를 구성하는 것을 의미함.
     컨테이너(애플리케이션)가 워크 노드에 들어가게 됨.

     컨테이너(애플리케이션) => docker 기준
     pod(컨테이너(애플리케이션)) => K8S 기준

     워크노드에는 pod 가 들어가게 됨.

   - 노드
     구성 요소는 Kubelet, Kube-proxy, 컨테이너 런타임, Pod 로 구성됨.

     Kubelet : Pod 내부의 컨테이너의 실행을 담당
     Kube-proxy : Pod 가 K8S 내부/외부와 네트워크 통신을 가능하게 함.
     컨테이너 런타임 : 컨테이터의 생명주기를 담당. 
                 이를 위해서 Kubelet 은 컨테이너 런타임과 통신을 수행.
     Pod : 컨테이너를 실행하기 위한 요소임. 
           컨테이너를 그룹화한 것이라고 생각하면 됨.
           하나의 Pod 에 속하는 컨테이너들은 모두 같은 노드에서 실행됨.
           하나의 Pod에 속한 컨테이너들은 하나의 목적을 위해 구성된 컨테이너들임.
           Pod 는 실행할 때 마다 IP 주소를 할당 받음. IP 주소는 유동적임.

3. 실습
   Pod 를 K8S에 배치하기 위해서는 명령어를 이용하지만,
   보통은 선언적인 방법이 좀 더 선호되기 때문에,
   Pod 의 spec 을 만들어주고, 이  spec  을 K8S에 적용하는 방식으로
   많이 사용된다고 생각하면 됨.

   선언적인 방법은 yaml 파일로 Pod 의 spec 을 정의해서,
   yaml 파일을 K8S에 적용.

   