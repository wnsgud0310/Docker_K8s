################ 1. Deployment 개념 ################
# ReplicaSet 의 버전을 관리래주는 객체( 컨트롤러 )
# ReplicaSet 내의 pod 들의 배포, 업데이트까지 담당하는 객체

# K8S 에 어떤 pod 를 배포한다는 것은 결국 그 pod 의 버전까지
# 관리해야 하는 경우가 대부분임.

# 그리고, 실제로 개발자들이 K8S 를 사용할 때, pod 나 ReplicaSet 을
# 직접 사용하는 경우는 잘 없음. Deployment 를 사용해서
# pod 나 ReplicaSet 을 관리하는 것으로 이해하면 좋음.

# 그래서, 앞으로 도 K8S 의 다른 객체들보다 Deployment 의
# spec 을 작성하고 관리하는 경우가 많아짐.

#
#
#
#
################ 2. Deployment spec 작성 ################
# - ReplicaSet 의 spec 을 포함하고 있음. spec 가 동일함.
# - strategy 이 pod 를 업데이트하는 상황이 발생했을 때,
#   어떤 방식으로 업데이트할지에 대한 spec 을 정의해야 함.

# Deployment 는 pod 의 업데이트 전략이 핵심적인 기능으로 볼 수 있음.

#
#
#
################ 3. Deployment 의 업데이트 전략 ################

# - Recreate
#   굉장히 단순한 업데이트 방식임.
#   모든 pod  를 한 번에 교체하는 전략임.

#   현재 pod 의 버전이 1.17 이고, 1.20 으로 변경된 버전으로
#   Deployment 를 적용하면, 모든 pod 를 종료시켜버리고,
#   새로운 버전의 pod 로 실행해주는 방식.

#   업데이트 되는 순간에 미세한 시차가 있겠지만,
#   동시에 모두 종료되고, 동시 모두 생성되어서, 실행된다고 생각하면 됨.

#   따라서, 서비스에 대한 downtime 이 존재할 수 있음.

# - RollingUpdate
#   K8S 에서 많이 사용되는 전략임.( 안정적인 서비스를 유지하면서, 업데이트 )

#   각 pod 를 한 번에 종료하지 않고,
#   각 pod 를 순차적으로 종료시키고 업데이트하는 전략으로
#   전체적으로 pod 가 종료되서 서비스가 중단되는 상황을
#   방지하는 전략임.

#   이 방식은 서비스를 무중단으로 업데이트 할 수 있다는 장점으로
#   일반적인 상황에서 선호되는 전략이라고 할 수 있음.

#   하지만, RollingUpdate 가 완료되기 까지는
#   구버전과 신버전이 같이 존재함으로,
#   API 를 설계를 할 때, 구버전과 시번저의 응답이 같이 발생하더라도
#   문제가 발생하지 않도록 호환성을 유지하도록 하는것이 중요함.

#
#
#
################ 4. RollingUpdate 의 업데이트 전략 ################

# 업데이트 구간에서 기존의 pod 수보다 하나 더 많아지게 됨.

# 레플리카 셋 에서 pod 를 3개로 spec 을 정의.
# Deployment 의 RollingUpdate 전략으로 spec 을 정의.

# 처음 실행시 pod 3개이고, 항상 3개를 유지 하려고 함.
# 무중단으로 업데이트를 진행한다면, 서버하고 있는 pod 3
# 업데이트를 진행하는 pod 1개 로 서비스 및 업데이트를 진행하는 상황.
# 3 -> 4 -> 3 (업데이트 구간에서 기존의 pod 수보다 하나 더 많아지게 됨.)

# 그래서, K8S 에서는 업데이트 구간에서 pod 가 추가로 생성되거나,
# 줄어들 수 있는 pod 의 수를 제어할 수 있는 옵션을 제공하고 있음.

# - maxSurge
# 업데이트 하는 동안 pod 가 얼마나 더(최대한계) 생성될 수 있는지
# - maxUnavailabel
# 업데이트 하는 동안 pod 가 얼마나 더(최대한계) 줄어들 수 있는지

# 그래서, 업데이트 구간에서 기존의 pod 수보다 하나가 더 많아지도록
# 업데이트가 이루어질 수 있도록 하는 경우( 3 -> 4 -> 3 )
# maxSurge = 1, maxUnavailabel = 1

# 따라서, 업데이트 구간의 pod 수의 범위를 아래와 같이 이해아면 됨.
# replicas - maxUnavailabel ~ replicas + maxSurge

# RollingUpdate 를 maxSurge = 1, maxUnavailabel = 1 로 설정한다면
# 업데이트 구간동안 새로운 버전의 pod 는 하나만 더 생성될 수 있고,
# 이와 동시에 기존 버전의 pod 는 한 개씩 순차적으로 종료될 수 있음을
# 예상할 수 있음.

# 업데이트 구간에는 기존 버전의 pod 는 최대한 한 개까지 종료될 수 있고,
# 신버전의 pod 는 최대한 한 개까지 생성될 수 있다는 이 조건을
# 위배하지 않고, pod 의 수를 조절해가면서 update 가 진행이 되도록
# K8S 가 보장을 해주게 됨.

# replicas : 3 이고, 서비스 pod 수가 이보다 줄어들지 않도록 한다면
# maxUnavailabel : 0 으로 설정하면 됨.

# maxUnavailabel : 0 으로 설정하면 됨.
# 그리고, maxSurge, maxUnavailabel 을 모두 0 으로 설정할 수 없음.

################ 5. Deployment 실습 ################
###### 5.1 Recreate 업데이트 전략 실습
# ex4-1-recreate.yaml
###### 5.2 RollingUpdate 업데이트 전략 실습
# ex4-2-rollingUpdate.yaml
