# secret 객체 만드는 방법

# 1. 명령형( cli )
# kubectl create secret generic db-info --from-literal=DB_PW=mypassword
# --from-literal : 문자열 형태로 secret 에서 key, value 형태로 저장하겠다는 의미.
# DB_PW : 환경변수의 key
# mypassword : DB_PW 환경변수의 value

# kubectl get secret

# kubectl describe secret db-info
# DB_PW key 의 value 를 볼 수 없음.

# 2. 선언형( yaml )
# secret 객체는 yaml 파일로 사용하지 않는 경우도 꽤 있음.
# yaml 로 관리를 하면, git 같은 곳에 관리될 수 있어,
# password 와 같은 보안을 유지해야 할 데이터가 유출될 수 있음.

# kubectl explain secret.data
# kubectl explain secret.stringData

# my-db secret 내부에 base64 로 인코딩된 mypassword 값을 가지고 있음.
# pod 에서 DB_PW 를 값을 참조하게 되면, 복호화된 mypassword 값을 사용하게 됨.

# pod 가 secret 의 DB_PW 를 참조하면, secret 에서 복호화가 진행됨.
# 하지만, base64 인코딩은 실제 암호화가 아니고,
# 그냥 문자열을 인코딩하는 수준임. 은밀하게 말하면 평문에 가까움.

# 그래서, kubectl, kubectl describe 와 같은 기본적인 명령어로 간단히
# 값을 보여주지만, 실제 값(디코딩된)은 보여주지 않음.

# 보안을 더 강화하고 싶다면,
# secret 에 접근할 수 있는 사용자와 프로세스를 제한하는 기능을 사용해야 함.
# 그리고, secret 에 저장되는 값에 실제 암호화를 할 수 있는 옵션 기능도 있음.

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  # data 필드의 모든 키(key)에 해당하는 값(value)은 base64 로 인코딩된 문자열이어야 함.
  DB_PW: bXlwYXNzd29yZA== # 평문 mypassword 를 base64 인코딩함.
stringData:
  API_KEY1: ABCD-1234-5678-ZYX
  API_KEY2: bXlwYXNzd29yZA==
# kubectl apply -f ex7-secret.yaml

# kubectl describe secret my-secret
# key 에 대한 value 를 확인할 수 없음

# secret 의 key 에 대한 value 를 직접 보려면
# kubectl get secret my-secret -o yaml
# -o : 출력형식 지정 ( yaml or json )
