
       ###################### factorial-app start ######################

1. 실습 환경 설정 - Ingress 설정
   1.1 kind.sigs.k8s.io 에 접속
   1.2 User Guide > Ingress 페이지로 이동
   1.3 기존 클러스터 삭제
       지금 까지 실습한 객체들이 모두 삭제가 됨.
   1.4 Ingress 설치 및 설정
       자세한 실행 관련 명령어는 아래의 파일의 하단부의 내용을 참조
       kind-cluster-config-for-ingress.yaml

2. K8S 에서의 통신
   - pod 내에서 컨테이너 간 통신
   - 서로 다른 pod 에 있는 컨테이너 간 통신
   - Service 를 이용한 애플리케이션(spring boot) 간 통신
     서비스( ClusterIP, ExternalName ) 객체
     서비스명으로 통신이 가능해짐.

     => Ingress 설치

3. spring boot jib plugin in
   java image build -> doker hub
   K8S Deployment 객체 생성해서, pod 로 만들어서 사용

4. pod(container) 의 update 전략 추가
   factorial-app-deploy2.yaml

5. spring boot 프로젝트에
   5.1 probe 설정
       GetMapping 설정
   5.2 factorial() 메소드
       GetMapping 설정
   5.3 jib build
       0.0.1 -> 0.0.2 로 변경
   5.4 Deployment 객체 생성
       0.0.2 image 사용
   5.5 Pod 의 0.0.2 image 버전 확인 & running 상태
       kubectl -n factorial get pods
       kubectl -n factorial describe pod POD_ID
   5.6 GetMapping test
       kubectl -n factorial exec -it POD_ID -- bash

       curl localhost:8080/factorial?=10
       curl localhost:8080/factorial?=-1

       curl localhost:8080/probe/startup
       curl localhost:8080/probe/ready
       curl localhost:8080/probe/live

6. graceful shutdown       
   6.1 yaml
       terminationGracePeriodSeconds 설정 추가

       보통은 30 초가 꽤 쓸만하지만, 설정하지 않으면 30초지만,
       실습을 위해서 60 으로 설정
   6.2 spring boot
       server:
            shutdown: graceful
        
        application 이 SIGTERM 신호를 받게 되면, 작업을 정리하고
        SIGKILL 신호가 오기 전에 먼저 종료가 되면,
        자연스럽게(graceful) 종료가 됨.
        SIGTERM 신호를 받게 되면, 더 이상 API 요청을 받지 않는
        상태가 됨.
 
        spring:
        lifecycle:
            timeout-per-shutdown-phase: 50

        기본적으로 spring 도 30초가 지나고 나서도
        작업이 정리가 되지 않으면 강제로 스스로 종료를 해버림.
        그런데, 여기 60 초로 설정을 했고,
        ( yaml terminationGracePeriodSeconds: 60 )
        실제로 spring application 에 주어진 시간은
        10 초 정도 sleep 한 후에 애플리케이션 종료 신호를 보내기 때문에
        60초에서 10초를 제외한 50초로 설정

        10 초 정도 에 대한 설정은 yaml 파일의
        "04.lifecycle hook 추가" 에 대한 내용임.



7. Probe 추가
   factorial-app-deploy3.yaml

   Probe : 
     K8S 가 Pod 정확하게는 Container 의 상태를 알아내기 위한 수단.

     K8S 가 container 의 상태를 확인하고 문제가 있을 경우에는
     재시작을 시켜주거나 하는 작업을 자동으로 해줌.

     Probe 가 없다면, K8S 는 단순히 컨테이너의 프로세스가 살았는지
     죽었는지에 대한 정보만으로만 컨테이너 재시작과 같은 작업을 해주게 됨.

     애플리케이션이 비정상적으로 동작한다던지 느려진다던지, 서서히
     머춰버린다던지 등등의 이런 경우를 K8S 의 Probe 를 사용하지 않는다면
     K8S의 핵심 기능을 사용하지 않고 있는것이라고 할 수 있음.

   Probe 종류 : 
     startupProbe : 
        다른 Probe 를 실행할지 말지를 결정하는 Check Probe 임.

     readinessProbe : 
        컨테이너를 네트워크에 연결해서 트래픽을 전달을 받을 지 아니면,
        네트워크에서 분리를 할 지를 결정하는 Check Probe 임.

     livenessProbe : 
        컨테이너가 정상인지 비정상인지 여부를 Check Probe 임.

   Probe 설정 고려 사항 : 
     - readinessProbe 는 livenessProbe 에 비해 보통 더 민감하게 설정
     - 컨테이너의 재시작이 서비스에 어떤 영향을 주는지 고려해서 결정해야 함.
     - Probe 설정에 따라 배포에 걸리는 시간도 달라짐.
     - Probe 체크는 컨테이너 내부의 프로세스에 한정해야 하며
       부담이 가는 동작이 아니어야 함.


       ###################### factorial-app end ######################

       ###################### factorial-cache-app start ######################

K8S 의 ConfigMap, Secret 객체 적용
       - ConfigMap : 다국어지원
       - Secret : 명령형으로 생성
                  api-key 용으로 사용

         kubectl -n factorial create secret generic factorial-secret --from-literal=api-key=abcd-1234-5678

         kubectl -n factorial get secret
K8S 의 Service 객체 적용
       - factorial-cache-app
         Ingerss 객체에서 factorial-cache-app service
       - factorial-cache-app 에서 factorial-app 을 참조 service 생성
         this message from factorial-app

K8S 의 Ingerss 객체 적용
       - postman 에서 api 사용



       ###################### factorial-cache-app end ######################